//////////WEATHER SYATION

#include <WiFi.h>
#include <ThingSpeak.h>
#include <DHT.h>
const char* ssid = "Enter The Name of Your Wi-Fi Here" ;
const char* password = "Enter The Password of Your Wi-Fi Here" ;
WiFiClient client ;
unsigned long myChannelNumber = 1;//Enter Your Channel Number and change it if it is not 1
const char * myWriteAPIKey = "Enter the Write API key of your Channel Here";
float temp ;
float humid ;
DHT dht(5, DHT11);
void setup() {
// put your setup code here, to run once:
pinMode (5, INPUT) ;
Serial.begin (9600) ;
dht.begin ();
WiFi.mode(WIFI_STA);
ThingSpeak.begin(client);
}
void loop() {
// put your main code here, to run repeatedly:
//Code to connect/reconnect to Wi-Fi
if (WiFi.status() != WL_CONNECTED) {
Serial.print("Attempting to connect");
while (WiFi.status() != WL_CONNECTED) {
WiFi.begin(ssid, password);
delay(5000);
}
Serial.println("\nConnected.");
}
//Code to monitor the data
temp = dht.readTemperature();
humid = dht.readHumidity();
delay(100);
//Code to Write the Data
Serial.println("Temperature : ") ;
Serial.print (temp) ;
Serial.print("ºC") ;
Serial.println("Humidity : ") ;
Serial.print (humid) ;
Serial.print("%") ;
int x = ThingSpeak.writeField(myChannelNumber, 1, temp, myWriteAPIKey);
Modern Education Society’s College of Engineering, Pune 1
Page 7 of 7
if (x == 200) {
Serial.println("Channel update successful.");
}
else {
Serial.println("Problem updating channel. HTTP error code " + String(x));
}
x = ThingSpeak.writeField(myChannelNumber, 2, humid, myWriteAPIKey);
if (x == 200) {
Serial.println("Channel update successful.");
}
else {
Serial.println("Problem updating channel. HTTP error code " + String(x));
}
}





///////////////////////////MQTT


Header File:
#define SECRET_SSID "MESCOE"
#define SECRET_PASS "ENTC"
Sender Code:
#include <ArduinoMqttClient.h>
#include <WiFiNINA.h>
#include "arduino_secrets.h"
///////please enter your sensitive data in the Secret tab/arduino_secrets.h
char ssid[] = SECRET_SSID; // your network SSID (name)
char pass[] = SECRET_PASS; // your network password (use for WPA, or use as key for
WEP)
WiFiClient wifiClient;
MqttClient mqttClient(wifiClient);
const char broker[] = "test.mosquitto.org";
int port = 1883;
const char topic[] = "real_unique_topic";
const char topic2[] = "real_unique_topic_2";
const char topic3[] = "real_unique_topic_3";
//set interval for sending messages (milliseconds)
const long interval = 8000;
unsigned long previousMillis = 0;
int count = 0;
void setup() {
 //Initialize serial and wait for port to open:
 Serial.begin(9600);
 while (!Serial) {
 ; // wait for serial port to connect. Needed for native USB port only
Modern Education Society’s College of Engineering, Pune 1
Page 5 of 9
 }
 // attempt to connect to Wifi network:
 Serial.print("Attempting to connect to WPA SSID: ");
 Serial.println(ssid);
 while (WiFi.begin(ssid, pass) != WL_CONNECTED) {
 // failed, retry
 Serial.print(".");
 delay(5000);
 }
 Serial.println("You're connected to the network");
 Serial.println();
 Serial.print("Attempting to connect to the MQTT broker: ");
 Serial.println(broker);
 if (!mqttClient.connect(broker, port)) {
 Serial.print("MQTT connection failed! Error code = ");
 Serial.println(mqttClient.connectError());
 while (1);
 }
 Serial.println("You're connected to the MQTT broker!");
 Serial.println();
}
void loop() {
 // call poll() regularly to allow the library to send MQTT keep alive which
 // avoids being disconnected by the broker
 mqttClient.poll();
 unsigned long currentMillis = millis();
 if (currentMillis - previousMillis >= interval) {
 // save the last time a message was sent
 previousMillis = currentMillis;
 //record random value from A0, A1 and A2
 int Rvalue = analogRead(A0);
 int Rvalue2 = analogRead(A1);
Modern Education Society’s College of Engineering, Pune 1
Page 6 of 9
 int Rvalue3 = analogRead(A2);
 Serial.print("Sending message to topic: ");
 Serial.println(topic);
 Serial.println(Rvalue);
 Serial.print("Sending message to topic: ");
 Serial.println(topic2);
 Serial.println(Rvalue2);
 Serial.print("Sending message to topic: ");
 Serial.println(topic2);
 Serial.println(Rvalue3);
 // send message, the Print interface can be used to set the message contents
 mqttClient.beginMessage(topic);
 mqttClient.print(Rvalue);
 mqttClient.endMessage();
 mqttClient.beginMessage(topic2);
 mqttClient.print(Rvalue2);
 mqttClient.endMessage();
 mqttClient.beginMessage(topic3);
 mqttClient.print(Rvalue3);
 mqttClient.endMessage();
 Serial.println();
 }
}
Receivers Code:
#include <ArduinoMqttClient.h>
#include <WiFiNINA.h>
#include "arduino_secrets.h"
///////please enter your sensitive data in the Secret tab/arduino_secrets.h
char ssid[] = SECRET_SSID; // your network SSID
char pass[] = SECRET_PASS; // your network password
WiFiClient wifiClient;
MqttClient mqttClient(wifiClient);
Modern Education Society’s College of Engineering, Pune 1
Page 7 of 9
const char broker[] = "test.mosquitto.org";
int port = 1883;
const char topic[] = "real_unique_topic";
const char topic2[] = "real_unique_topic_2";
const char topic3[] = "real_unique_topic_3";
void setup() {
 //Initialize serial and wait for port to open:
 Serial.begin(9600);
 while (!Serial) {
 ; // wait for serial port to connect. Needed for native USB port only
 }
 // attempt to connect to Wifi network:
 Serial.print("Attempting to connect to SSID: ");
 Serial.println(ssid);
 while (WiFi.begin(ssid, pass) != WL_CONNECTED) {
 // failed, retry
 Serial.print(".");
 delay(5000);
 }
 Serial.println("You're connected to the network");
 Serial.println();
 Serial.print("Attempting to connect to the MQTT broker: ");
 Serial.println(broker);
 if (!mqttClient.connect(broker, port)) {
 Serial.print("MQTT connection failed! Error code = ");
 Serial.println(mqttClient.connectError());
 while (1);
 }
 Serial.println("You're connected to the MQTT broker!");
 Serial.println();
 // set the message receive callback
 mqttClient.onMessage(onMqttMessage);
 Serial.print("Subscribing to topic: ");
Modern Education Society’s College of Engineering, Pune 1
Page 8 of 9
 Serial.println(topic);
 Serial.println();
 // subscribe to a topic
 mqttClient.subscribe(topic);
 mqttClient.subscribe(topic2);
 mqttClient.subscribe(topic3);
 // topics can be unsubscribed using:
 // mqttClient.unsubscribe(topic);
 Serial.print("Topic: ");
 Serial.println(topic);
 Serial.print("Topic: ");
 Serial.println(topic2);
 Serial.print("Topic: ");
 Serial.println(topic3);
 Serial.println();
}
void loop() {
 // call poll() regularly to allow the library to receive MQTT messages and
 // send MQTT keep alive which avoids being disconnected by the broker
 mqttClient.poll();
}
void onMqttMessage(int messageSize) {
 // we received a message, print out the topic and contents
 Serial.println("Received a message with topic '");
 Serial.print(mqttClient.messageTopic());
 Serial.print("', length ");
 Serial.print(messageSize);
 Serial.println(" bytes:");
 // use the Stream interface to print the contents
 while (mqttClient.available()) {
 Serial.print((char)mqttClient.read());
 }
 Serial.println();
 Serial.println();
}




\\\\\\\\\\\\\\\\DOOR LOCK

#include <Servo.h>
#include <LiquidCrystal_I2C.h>
#include <HCSR04.h>
Servo myservo;
LiquidCrystal_I2C lcd(0x27, 16, 2);
int distance=0;
byte triggerPin = 12;
byte echoPin = 11;
int pos = 0;
void setup() {
myservo.attach(10);
Serial.begin(9600);
lcd.init();
lcd.begin(16, 2);
lcd.backlight();
lcd.setCursor(0, 0);
lcd.print("start");
pinMode(triggerPin, OUTPUT);
pinMode(echoPin,INPUT);
lcd.print("All set up");
}
void loop() {
digitalWrite(triggerPin,LOW);
delayMicroseconds(5);
digitalWrite(triggerPin,HIGH);
delayMicroseconds(10);
digitalWrite(triggerPin,LOW);
int duration = pulseIn(echoPin,HIGH);
distance = (duration/2) / 29.1;
Serial.println(distance);
if(distance<=10){
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Door Open");
lcd.setCursor(0, 1);
lcd.print(distance);
lcd.print("cm");
myservo.write(90);
}else{
lcd.clear();
Modern Education Society’s College of Engineering, Pune 1
Page 8 of 9
lcd.setCursor(0, 0);
lcd.print("Door Closed");
lcd.setCursor(0, 1);
lcd.print(distance);
lcd.print("cm");
myservo.write(0);
}
delay(250);
}
SOURCE CODE (without I2C Module)
#include <Servo.h>
#include <LiquidCrystal.h>
#include <HCSR04.h>
Servo myservo;
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
int distance=0;
byte triggerPin = 13;
byte echoPin = 6;
int pos = 0;
void setup() {
myservo.attach(9);
Serial.begin(9600);
lcd.begin(16, 2);
pinMode(triggerPin, OUTPUT);
pinMode(echoPin,INPUT);
lcd.print("All set up");
}
void loop() {
digitalWrite(triggerPin,LOW);
delayMicroseconds(5);
digitalWrite(triggerPin,HIGH);
delayMicroseconds(10);
digitalWrite(triggerPin,LOW);
int duration = pulseIn(echoPin,HIGH);
distance = (duration/2) / 29.1;
Serial.println(distance);
if(distance<=10){
lcd.clear();
lcd.setCursor(0, 0);
Modern Education Society’s College of Engineering, Pune 1
Page 9 of 9
lcd.print("Door Open");
lcd.setCursor(0, 1);
lcd.print(distance);
lcd.print("cm");
myservo.write(90);
}else{
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Door Closed");
lcd.setCursor(0, 1);
lcd.print(distance);
lcd.print("cm");
myservo.write(0);
}
delay(250);
}




\\\\\\\\\\\\\\\\\\\\\\HOME AUTOMATION

/ Template ID, Device Name and Auth Token are provided by the Blynk.Cloud
// See the Device Info tab, or Template settings
#defin
e BLYNK_TEMPLATE_ID "TMPLiKV9fpaa"
#define BLYNK_DEVICE_NAME "Quickstart Device"
#define BLYNK_AUTH_TOKEN "JTIqzbGljMUty71F7q6W7dKh_O_YaYnp"
// Comment this out to disable prints and save space
#define BLYNK_PRINT Serial
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
char auth[] = BLYNK_AUTH_TOKEN;
// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "YourNetworkName";
char pass[] = "YourPassword";
BlynkTimer timer;
// This function is called every time the Virtual Pin 0 state changes
BLYNK_WRITE(V0)
{
// Set incoming value from pin V0 to a variable
int value = param.asInt();
// Update state
Blynk.virtualWrite(V1, value);
}
// This function is called every time the device is connected to the Blynk.Cloud
BLYNK_CONNECTED()
{
// Change Web Link Button message to "Congratulations!"
Blynk.setProperty(V3, "offImageUrl",
"https://static image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations.png");
Blynk.setProperty(V3, "onImageUrl",
"https://static image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations_pressed.png"
);
Blynk.setProperty(V3, "url", "https://docs.blynk.io/en/getting-started/what-do-i-needto blynk/how-quickstart-device-was-made");
}
// This function sends Arduino's uptime every second to Virtual Pin 2.
void myTimerEvent()
{
// You can send any value at any time.
// Please don't send more that 10 values per second.
Modern Education Society’s College of Engineering, Pune 1
Page 8 of 8
Blynk.virtualWrite(V2, millis() / 1000);
}
void setup()
{
// Debug console
Serial.begin(115200);
Blynk.begin(auth, ssid, pass);
// You can also specify server:
//Blynk.begin(auth, ssid, pass, "blynk.cloud", 80);
//Blynk.begin(auth, ssid, pass, IPAddress(192,168,1,100), 8080);
// Setup a function to be called every second
timer.setInterval(1000L, myTimerEvent);
}
void loop()
{
Blynk.run();
timer.run();
// You can inject your own code or combine it with other sketches.
// Check other examples on how to communicate with Blynk. Remember
// to avoid delay() function!
}
