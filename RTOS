/* *************************************************************
 * Project Name : 
 * Description  : Program to implement message queue
 * Author       : 
 * Date         :           
 * **************************************************************/
#include "includes.h"

#define TASK_STACK_SIZE 512
#define MSG_QUEUE_SIZE 2

/*====== led() declarations =====*/
void ledon(int );
void ledon1(int );
void ledoff(int );
void ledoff1(int );
void ledinit(void);
/*========== UCOS_II parameter Declaration ==========*/
OS_STK task_a_stack[TASK_STACK_SIZE];
OS_STK task_b_stack[TASK_STACK_SIZE];
void task_a(void *pdata);
void task_b(void *pdata);
OS_EVENT *MsgQ;
void *MsgQTbl[MSG_QUEUE_SIZE];

/*====== Main() =========*/
int  main (void)
{
    /* Function called to initialise the LEDs*/
    ledinit();
    /* Function called to initialise the OS*/
    OSInit();
    /* Msg Queue Create */
    MsgQ=OSQCreate(&MsgQTbl[0],MSG_QUEUE_SIZE);
	/* Create tasks  */
	OSTaskCreate(task_a, (void *)0, &task_a_stack[TASK_STACK_SIZE-1], 0);
	OSTaskCreate(task_b, (void *)0, &task_b_stack[TASK_STACK_SIZE-1], 1);
	/* Function called to start multitasking*/
    OSStart();
	return 0;
}

/*=============== Task A  =============== */
void task_a(void *pdata)
{
	unsigned int i,temp[2]={0,1};
	
	/* Initialize The Timer */
	timer_init();
	IOCLR0 = 0x00FFFF0;
  	while(1) 
 	{
	 	for(i=0;i<2;i++)
	 	{
	 		ledoff(temp[i]);
		 	OSTimeDly(500);
	 		ledon(temp[i]); 	
 		 	OSQPost(MsgQ,(void*)&temp[i]);
			OSTimeDlyHMSM(0,0,1,0);
	   }	
	}
}

/* =============== Task B  =============== */
void task_b(void *pdata)
{
	unsigned int i,*rtemp=0;
	while(1) 
	{		
		/*Pend (wait) For The Created Msg Queue */
		rtemp=OSQAccept(MsgQ);
		/*perform The Respective task Using The Receieved Message*/
	 	ledoff1(*rtemp);
		OSTimeDly(25);
	 	ledon1(*rtemp);
	}
}
void ledon(int led)
{
	IOSET0 = 1<<(led+5);
	
}
void ledon1(int led)
{
	IOSET0 = 1<<(led+8);
	
}

void ledoff(int led)
{
	IOCLR0 = 1<<(led+5);
	
}
void ledoff1(int led)
{
	IOCLR0 = 1<<(led+8);
}
void ledinit(void)
{
	IODIR0= 0x0000FFF0;
	IOCLR0= 0xffffffff;
}



/* ****************************************************************
 * Project Name : 
 * Description  : Program to implement simple schedular(multitasking)
 * Author       : 
 * Date         :           
 * *************************************************************** */

#include "includes.h"

/* ============= uCOS-II parameters ============*/
OS_STK TestTask1Stack[200];     //Stack declaration for Task 1
void TestTask1(void *pdata);    //TestTask1() declaration

OS_STK TestTask2Stack[200];    //Stack declaration for Task 2
void TestTask2(void *pdata);   //TestTask2() declaration

OS_STK TestTask3Stack[200];    //Stack declaration for Task 3
void TestTask3(void *pdata);   //TestTask2() declaration

void ledon(int );
void ledon1(int );
void ledon2(int );
void ledoff(int );
void ledoff1(int );
void ledoff2(int );
void ledinit(void);
/* ================== main() ======================*/
int  main (void)
{
   	/* Function called to initialise the LEDs*/
   	ledinit();
   	
 	/* Function called to initialise the OS*/
 	OSInit();
 	
 	/* Function called to create TASK 1*/
	OSTaskCreate(TestTask1, (void *)0, &TestTask1Stack[199], 0);
	OSTaskCreate(TestTask3, (void *)0, &TestTask3Stack[199], 2);	
    /* Function called to start multitasking*/
    OSStart();
    
	return 0;
}

/*==================== Task A =====================*/
       /*( LED[6:7] Task: blink ascending ) */
/*=================================================*/
void TestTask1(void *pdata)
{
	int led = 0;
   	/* Function called to initialise the timer */
	timer_init();
	/* Function called to create TASK 2*/
	OSTaskCreate(TestTask2, (void *)0, &TestTask2Stack[199], 1);
	
	while(1) 
	{
	 	ledon(led);
	 	OSTimeDlyHMSM(0, 0, 3, 0); //Generate delay of 1 sec
		ledoff(led);
		led++;
		if(led==2)
		{
			led = 0;
		}
	}
}

/*==================== Task B =====================*/
       /*( LED[8&9] Task: blink ascending ) */
/*=================================================*/
void TestTask2(void *pdata)
{
	int led1 =0;
	

	while(1) 
	{
	 	ledon1(led1);
	 	OSTimeDlyHMSM(0, 0, 2, 0); //Generate delay of 250ms
		ledoff1(led1);
		
		led1++;
		if(led1==2)
		{
			led1 = 0;
		}
	}
}
/*==================== Task C =====================*/
       /*( LED 10 Task: blink  ) */
/*=================================================*/
void TestTask3(void *pdata)
{
	int led2 =0;

	while(1) 
	{
	 	ledon2(led2);
	 	OSTimeDlyHMSM(0, 0, 0, 500); //Generate delay of 250ms
		ledoff2(led2);
		OSTimeDlyHMSM(0, 0, 0, 500); //Generate delay of 250ms
	}
}


void ledon(int led)
{
	IOSET0 = 1<<(led+6);
}
void ledon1(int led)
{
	IOSET0 = 1<<(led+8);
}
void ledon2(int led)
{
	IOSET0 = 1<<(led+10);
}
void ledoff(int led)
{
	IOCLR0 = 1<<(led+6);
}
void ledoff1(int led)
{
	IOCLR0 = 1<<(led+8);
}
void ledoff2(int led)
{
	IOCLR0 = 1<<(led+10);
}


void ledinit(void)
{
	IODIR0= 0x0000FFF0;
	IOCLR0= 0x0000FFF0;
}



/* ***********************************************************
 * Project Name : 
 * Description  : Program to implement (Task-to-task context switching)using mailbox{mailbox}
 * Author       : 
 * Date         :           
 * ******************************************************* */

#include "includes.h"

/*====== led() declarations =====*/
void ledon(int );
void ledon1(int );
void ledoff(int );
void ledoff1(int );
void ledinit(void);
/* ============= uCOS-II parameters ============*/
#define TASK_STACK_SIZE 512

OS_STK task_a_stack[TASK_STACK_SIZE];   //Stack declaration for Task a
void task_a(void *pdata);               //task_a() declaration   

OS_STK task_b_stack[TASK_STACK_SIZE];   //Stack declaration for Task b
void task_b(void *pdata);               //task_b() declaration  
  
OS_EVENT *AckMbox; //Global declaration of AckMbox variable                    
OS_EVENT *TxMbox;  //Global declaration of AckMbox variable


/* ================== main() ======================*/
int  main (void)
{
    unsigned int i;
    INT8U status;
    
   	ledinit();		/* Function called to initialise the LEDs*/
   	
 	OSInit();		/* Function called to initialise the OS*/
    
	AckMbox = OSMboxCreate((void *)0);/* Create Mailbox Ack parameter*/
	
	TxMbox = OSMboxCreate((void *)0);/* Create Mailbox Transmit parameter*/
		
	status =OSTaskCreate(task_a, (void *)0, &task_a_stack[TASK_STACK_SIZE-1], 0);		/* Function called to create TASK a*/
	
	status = OSTaskCreate(task_b, (void *)0, &task_b_stack[TASK_STACK_SIZE-1], 1);		/* Function called to create TASK b*/
	
    OSStart();			/* Function called to start multitasking*/
	return 0;
}

/*==================== Task A ==================== */
void task_a(void *pdata)
{
	int temp=0;;
	INT8U status;
	/* Function called to initialise the timer */
	timer_init();
	
	ledoff(temp);
 	while(1) 
 	{
		ledoff(temp);
	 	OSTimeDly(500);
	 	ledon(temp);
	 	
	 	/*  Post Or Transmit Mailbox Message  */
	 	status= OSMboxPost(TxMbox,(void*)&temp);
	 	if(status==OS_NO_ERR)	
		{
			//msg posted
		 	IOSET0 = 1<<(6);
		}	
		else
		 	IOCLR0 = 1<<(6);
		
    	/* Wait Mailbox Acknoledge  */
    	OSMboxPend(AckMbox, 0, &status);
		if(status==OS_NO_ERR)	
		{
			//msg received
		 	IOSET0 = 1<<(5);
		}	
		else
		 	IOCLR0 = 1<<(5);
		temp++;	
		if(temp==2)
		{
			temp=0;
		} 	
	}
}

/*==================== Task B ==================== */
void task_b(void *pdata)
{
	int *rtemp;
	unsigned int i,j;
	INT8U status;
	
 	while(1) 
 	{
		/* Wait Mailbox Acknoledge  */
		rtemp=OSMboxPend(TxMbox,0,&status);
		
		ledoff1(*rtemp);
		OSTimeDly(500);
	 	ledon1(*rtemp);
	 	/*  give acknowledge  */
	 	OSMboxPost(AckMbox,(void*)1);
	}
}


void ledon(int led)
{
	IOSET0 = 1<<(led+7);
	
}
void ledon1(int led)
{
	IOSET0 = 1<<(led+12);
	
}

void ledoff(int led)
{
	IOCLR0 = 1<<(led+7);
	
}
void ledoff1(int led)
{
	IOCLR0 = 1<<(led+12);
}
void ledinit(void)
{
	IODIR0= 0x0000FFF0;
	IOCLR0= 0xffffffff;
}


/* **************************************************************
 * Project Name : 
 * Description  : Program to implement semaphore {semaphore}
 * Author       : 
 * Date         :           
 * *********************************************************** */
/* ========* uCOS-II : Task-to-task context switching.=========
 * TaskA posts semA and pends on semB,
 * TaskB pends on semA and posts semB, 
 * ============================================================*/
#include "includes.h"
/*========== UCOS_II parameter Declaration ==========*/
#define TASK_STACK_SIZE 512
OS_STK task_a_stack[TASK_STACK_SIZE];
OS_STK task_b_stack[TASK_STACK_SIZE];
void task_a(void *pdata);
void task_b(void *pdata);
OS_EVENT *sem_a;
OS_EVENT *sem_b;
/* ================== main() ======================*/
int  main (void)
{
    unsigned int i, j;
	/* Function called to initialise the LEDs*/
   	led_init();
  	/* Function called to initialise the OS*/
 	OSInit();
	/* Create task A (at priority 0) */
	OSTaskCreate(task_a, (void *)0, &task_a_stack[TASK_STACK_SIZE-1], 0);
    OSStart();
	return 0;
}

/*==================== Task A ==================== */
void task_a(void *pdata)
{
	int i=0;
	INT8U status;

	/* Initialize */
	timer_init();

	/* Semaphores */
	sem_a = OSSemCreate(0);
	sem_b = OSSemCreate(0);
	
	/* Create task B (at priority 1) */
	status = OSTaskCreate(
		task_b, (void *)0, &task_b_stack[TASK_STACK_SIZE-1], 1);
	
	/* Start task-to-task posting */
 	IOCLR0 =1<<12;// 0x00003000;
 	
 	while(1) 
 	{
		/* Posting semaphore A to task B */
	 	IOSET0 =1<<12;// 0x00003000;				/*0000 0000 0111 1000 0000 0000 0001 0000*/
	 	OSTimeDly(100);
	 	status= OSSemPost(sem_a);
		/* Wait for semaphore B */
    	OSSemPend(sem_b, 0, &status);
		
		
		IOCLR0 =1<<12;// 0x00003000;
	 	OSTimeDly(100);
	 	/* Posting semaphore A to task B */
    	OSSemPost(sem_a);
    	/* Wait for semaphore B */
    	OSSemPend(sem_b, 0, &status);
		
	}
}

/*==================== Task B ==================== */
void task_b(void *pdata)
{
	INT8U status;

 	IOCLR0 = 1<<5;//0x00000C00;
 	while(1) 
 	{
		/* Wait for semaphore A */
    	OSSemPend(sem_a, 0, &status);
		IOSET0 = 1<<5;//0x00000C00;
		OSTimeDly(100);
		
		/* Posting semaphore B to task A */
    	OSSemPost(sem_b);

		
		/* Wait for semaphore A */
    	OSSemPend(sem_a, 0, &status);
		
	 	IOCLR0 = 1<<5;//0x00000C00;
		OSTimeDly(100);
		/* Posting semaphore B to task A */
    	OSSemPost(sem_b);

	}
}
